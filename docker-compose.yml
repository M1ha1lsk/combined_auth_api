version: '3.8'

services:
  db:
    image: postgres:13
    container_name: auth_db
    restart: always
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
      POSTGRES_DB: auth_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2023-10-25T06-33-25Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 | grep Mode || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 3

  spark-master:
    image: bitnami/spark:3.4
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./api/spark_jobs:/app/spark_jobs
      - ./api/spark_jobs/jars:/opt/bitnami/spark/extra-jars
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 3

  spark-worker:
    image: bitnami/spark:3.4
    container_name: spark-worker
    depends_on:
      spark-master:
        condition: service_started
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
    volumes:
      - ./api/spark_jobs:/app/spark_jobs
      - ./api/spark_jobs/jars:/opt/bitnami/spark/extra-jars
    restart: on-failure

  service:
    build: .
    container_name: combined_service
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      minio:
        condition: service_started
      spark-master:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://auth_user:auth_password@db:5432/auth_db
      PYTHONUNBUFFERED: 1
      PYTHONPATH: /app
      WAIT_FOR_SERVICES: "true"
    command: >
      sh -c "
      if [ \"$WAIT_FOR_SERVICES\" = \"true\" ]; then
        echo 'Waiting for dependencies...';
        while ! nc -z db 5432; do sleep 1; done;
        while ! nc -z kafka 9092; do sleep 1; done;
        while ! nc -z minio 9000; do sleep 1; done;
        while ! nc -z spark-master 7077; do sleep 1; done;
      fi;
      echo 'Running migrations...';
      cd /app/auth_db && alembic upgrade head;
      echo 'Starting services...';
      uvicorn auth_db.app.main:app --host 0.0.0.0 --port 8000 &
      cd /app/api && ./entrypoint.sh uvicorn main:app --host 0.0.0.0 --port 8001
      "
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./auth_db:/app/auth_db
      - ./api:/app/api
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  minio_data: